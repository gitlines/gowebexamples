<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Web Examples</title>
    <link>https://gowebexamples.com/</link>
    <description>Recent content on Go Web Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://gowebexamples.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Own</title>
      <link>https://gowebexamples.com/first-own/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/first-own/</guid>
      <description>First Own Introduction Go is a battery included programming language and has a webserver already built in. The net/http package from the standard library contains all functionalities about the HTTP protocol. This includes (among many other things) an HTTP client and an HTTP server. In this example you will figure out how simple it is, to create a webserver that you can view in your browser.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://gowebexamples.com/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/hello-world/</guid>
      <description>Hello World Introduction Go is a battery included programming language and has a webserver already built in. The net/http package from the standard library contains all functionalities about the HTTP protocol. This includes (among many other things) an HTTP client and an HTTP server. In this example you will figure out how simple it is, to create a webserver that you can view in your browser.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>HTTP Server</title>
      <link>https://gowebexamples.com/http-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/http-server/</guid>
      <description>HTTP Server Introduction In this example you will learn how to create a basic HTTP server in Go. First, let&amp;rsquo;s talk about what our HTTP server should be capable of. A basic HTTP server has a few key jobs to take care of.
 Process dynamic requests: Process incoming requests from users who browse the website, log into their accounts or post images. Serve static assets: Serve JavaScript, CSS and images to browsers to create a dynamic experience for the user.</description>
    </item>
    
    <item>
      <title>Routing (using gorilla/mux)</title>
      <link>https://gowebexamples.com/routes-using-gorilla-mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/routes-using-gorilla-mux/</guid>
      <description>Routing (using gorilla/mux) Introduction Go&amp;rsquo;s net/http package provides a lot of functionalities for the HTTP protocol. One thing it doesn&amp;rsquo;t do very well is complex request routing like segmenting a request url into single parameters. Fortunately there is a very popular package for this, which is well known for the good code quality in the Go community. In this example you will see how to use the gorilla/mux package to create routes with named parameters, GET/POST handlers and domain restrictions.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://gowebexamples.com/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/templates/</guid>
      <description>Templates Introduction Go&amp;rsquo;s html/template package provides a rich templating language for HTML templates. It is mostly used in web applications to display data in a structured way in a client&amp;rsquo;s browser. One great benefit of Go&amp;rsquo;s templating language is the automatic escaping of data. There is no need to worry about about XSS attacks as Go parses the HTML template and escapes all inputs before displaying it to the browser.</description>
    </item>
    
    <item>
      <title>Assets and Files</title>
      <link>https://gowebexamples.com/static-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/static-files/</guid>
      <description>Assets and Files This example will show how to serve static files like CSSs, JavaScripts or images from a specific directory.
   (adsbygoogle = window.adsbygoogle || []).push({});  // static-files.go package main import &amp;#34;net/http&amp;#34; func main() { fs := http.FileServer(http.Dir(&amp;#34;assets/&amp;#34;)) http.Handle(&amp;#34;/static/&amp;#34;, http.StripPrefix(&amp;#34;/static/&amp;#34;, fs)) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } $ tree assets/ assets/ └── css └── styles.css $ go run static-files.go $ curl -s http://localhost:8080/static/css/styles.css body { background-color: black; }</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://gowebexamples.com/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/forms/</guid>
      <description>Forms This example will show how to simulate a contact form and parse the message into a struct.
   (adsbygoogle = window.adsbygoogle || []).push({});  // forms.go package main import ( &amp;#34;html/template&amp;#34; &amp;#34;net/http&amp;#34; ) type ContactDetails struct { Email string Subject string Message string } func main() { tmpl := template.Must(template.ParseFiles(&amp;#34;forms.html&amp;#34;)) http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { if r.Method != http.MethodPost { tmpl.Execute(w, nil) return } details := ContactDetails{ Email: r.</description>
    </item>
    
    <item>
      <title>Middleware (Basic)</title>
      <link>https://gowebexamples.com/basic-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/basic-middleware/</guid>
      <description>Middleware (Basic) This example will show how to create basic logging middleware in Go.
A middleware simply takes a http.HandlerFunc as one of its parameters, wraps it and returns a new http.HandlerFunc for the server to call.
   (adsbygoogle = window.adsbygoogle || []).push({});  // basic-middleware.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func logging(f http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { log.Println(r.URL.Path) f(w, r) } } func foo(w http.</description>
    </item>
    
    <item>
      <title>Middleware (Advanced)</title>
      <link>https://gowebexamples.com/advanced-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/advanced-middleware/</guid>
      <description>Middleware (Advanced) This example will show how to create a more advanced version of middleware in Go.
A middleware in itself simply takes a http.HandlerFunc as one of its parameters, wraps it and returns a new http.HandlerFunc for the server to call.
Here we define a new type Middleware which makes it eventually easier to chain multiple middlewares together. This idea is inspired by Mat Ryers&amp;rsquo; talk about Building APIs.</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>https://gowebexamples.com/sessions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/sessions/</guid>
      <description>Sessions This example will show how to store data in session cookies using the popular gorilla/sessions package in Go.
Cookies are small pieces of data stored in the browser of a user and are sent to our server on each request. In them, we can store e.g. whether or not a user is logged in into our website and figure out who he actually is (in our system).
In this example we will only allow authenticated users to view our secret message on the /secret page.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://gowebexamples.com/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/json/</guid>
      <description>JSON This example will show how to encode and decode JSON data using the encoding/json package.
   (adsbygoogle = window.adsbygoogle || []).push({});  // json.go package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) type User struct { Firstname string `json:&amp;#34;firstname&amp;#34;` Lastname string `json:&amp;#34;lastname&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { http.HandleFunc(&amp;#34;/decode&amp;#34;, func(w http.ResponseWriter, r *http.Request) { var user User json.NewDecoder(r.Body).Decode(&amp;amp;user) fmt.Fprintf(w, &amp;#34;%s %s is %d years old!&amp;#34;, user.</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://gowebexamples.com/websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/websockets/</guid>
      <description>Websockets This example will show how to work with websockets in Go. We will build a simple server which echoes back everything we send to it. For this we have to go get the popular gorilla/websocket library like so:
$ go get github.com/gorilla/websocket
From now on, every application we write will be able to make use of this library.
   (adsbygoogle = window.adsbygoogle || []).push({});  // websockets.</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>https://gowebexamples.com/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/password-hashing/</guid>
      <description>Password Hashing (bcrypt) This example will show how to hash passwords using bcrypt. For this we have to go get the golang bcrypt library like so:
$ go get golang.org/x/crypto/bcrypt
From now on, every application we write will be able to make use of this library.
   (adsbygoogle = window.adsbygoogle || []).push({});  // passwords.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/crypto/bcrypt&amp;#34; ) func HashPassword(password string) (string, error) { bytes, err := bcrypt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gowebexamples.com/imprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/imprint/</guid>
      <description>Legal Disclosure Information in accordance with section 5 TMG
document.write(atob(&#34;UGhpbGlwcCBUYW5sYWs8YnI+QmVuZWRpa3RpbmVyc3RyLiA0OTxicj4zMzA5OCBQYWRlcmJvcm48YnI+&#34;)); Contact Telephone: document.write(atob(&#34;KzQ5MTc2OTEzNDIwNjc=&#34;)); E-Mail: document.write(atob(&#34;cGhpbGlwcC50YW5sYWtAZ21haWwuY29t&#34;)); Person responsible for content in accordance with 55 Abs. 2 RStV document.write(atob(&#34;UGhpbGlwcCBUYW5sYWs8YnI+QmVuZWRpa3RpbmVyc3RyLiA0OTxicj4zMzA5OCBQYWRlcmJvcm48YnI+&#34;)); Indication of source for images and graphics https://amazon.com
Disclaimer Accountability for content The contents of our pages have been created with the utmost care. However, we cannot guarantee the contents&amp;rsquo; accuracy, completeness or topicality. According to statutory provisions, we are furthermore responsible for our own content on these web pages.</description>
    </item>
    
    <item>
      <title>Privacy Statement</title>
      <link>https://gowebexamples.com/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.com/privacy/</guid>
      <description>Privacy Statement General Your personal data (e.g. title, name, house address, e-mail address, phone number, bank details, credit card number) are processed by us only in accordance with the provisions of German data privacy laws. The following provisions describe the type, scope and purpose of collecting, processing and utilizing personal data. This data privacy policy applies only to our web pages. If links on our pages route you to other pages, please inquire there about how your data are handled in such cases.</description>
    </item>
    
  </channel>
</rss>